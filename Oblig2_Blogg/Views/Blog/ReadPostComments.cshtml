@using System.Linq.Expressions
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Oblig2_Blogg.Authorization
@using Oblig2_Blogg.Models.Entities
@model Oblig2_Blogg.Models.ViewModels.PostViewModel

@inject SignInManager<ApplicationUser> signInManager
@inject UserManager<ApplicationUser> userManager
@inject IAuthorizationService AuthorizationService

@{
    ViewData["Title"] = "ReadPostComments"; }

<h1>@Model.PostText</h1>
<hr />
<div>
    <h4>Post</h4>

    <hr />
    @if (TempData["Feedback"] != null)
    {
        <div class="success-centered text-info">
            <h5>@TempData["Feedback"]</h5>
        </div>
    }
    <p>
        Created: @Model.Created,
        @if (@Model.Owner == null)
        {<a> User not registered</a> }
        else
        {<a> Created by: @Model.Owner.FirstName</a>}
    </p>

    <hr />

    <p>@Html.ActionLink("Create new comment", "CreateComment", "Comment", new { PostId = @Model.PostId, id = @Model.PostId })</p>
    <hr />
    <p>Comments:....</p>
    <hr />
</div>

<table class="table table-hover">
    <tr>
        <th>User</th>
        <th>Created</th>
        <th>Modified </th>
        <th>Comment </th>
        <th>Options</th>
    </tr>
    @try
    {
        @foreach (var item in Model.Comments)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Owner.FirstName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Created)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Modified)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CommentText)
                </td>
                <td>
                    @if (signInManager.IsSignedIn(User))
                    {
                        @if ((await AuthorizationService.AuthorizeAsync(
                          User, item,
                          BlogOperations.Update)).Succeeded)
                        {

                            @Html.ActionLink("Edit", "EditComment", "Comment", new { CommentId = item.CommentId })
                        }

                        @if ((await AuthorizationService.AuthorizeAsync(
                          User, item,
                          BlogOperations.Update)).Succeeded)
                        {
                            @Html.ActionLink(" | Delete", "DeleteComment", "Comment", new { CommentId = item.CommentId })
                        }
                    }
                </td>
            </tr>
        }
    }
    catch (NullReferenceException e)
    {
        Console.Write(e);
    }
</table>

<div>
    <a asp-controller="Blog" asp-action="Index">Back to List</a> |
    @Html.ActionLink("Gå tilbake til innlegg", "ReadBlogPosts", "Blog", new { id = Model.BlogId })
</div>
<hr />


@section scripts{
    <partial name="_ValidationScriptsPartial" />
    <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
    <script>

        // JWT-------------------------------------------------------------------------------------------------------------------
        function handleError(xhr, textStatus, errorThrown){
            if (xhr.status === 401)
                $('#responseContainer').html("Unauthorized request");
            else{
                var message = "<p>Status code: " + xhr.status + "</p>";
                message += "<pre>" + xhr.responseText + "</pre>";
                $('#responseContainer').html(message);
            }
        }
        function isUserLoggedIn(){
            return localStorage.getItem("token") !== null;
        }

        function getSavedToken() {
            return localStorage.getItem("token");
        }


        $('#btLogout').click(function(){
            $.ajax ({
                    url: "/identity/account/logout",
                    type: "GET"
                })
                .done(function(){
                    $('#responseContainer').html("<p>Cookie deleted and token deleted from local storage</p>");
                    localStorage.removeItem("token");
                    localStorage.removeItem("username");
                    $('#btLogoutContainer').hide();
                    $("#modalButton").show();
                    $('#btLoginContainer').show();
                    $('#commentsOnPost').load("");


                })
                .fail(handleError);
        });

        function getToken(userName, userPassword) {
            $.ajax({
                    url: "/api/accounts/verifyLogin",
                    type: "POST",
                    data: JSON.stringify({
                        username: userName,
                        password: userPassword
                    }),
                    contentType: "application/json; charset=utf-8",
                    //dataType: "json" 
                })
                .done(function (token) {
                    localStorage.setItem("token", token);
                    localStorage.setItem("username", userName);
                    $('#btLoginContainer').hide();
                    $('#btLogoutContainer').show();
                    var message = "<p>Token received and saved in local storage under the key 'token'</p>";
                    message += "<p>Token Value: </p><p style='word-wrap:break-word'>" + token + "</p>";
                    $('#responseContainer').html(message);
                    get(@TempData["chosenId"]);
                    $("#modalButton").show();
                })
                .fail(function () {
                    console.log("Login error");
                });
        }

        //setInterval("Update()", 10000);

        //-------------------------View all comments-----------------------------------------------//
        function showAll() {
            listComments(function(comments) {

                var strComments = "";
                $.each(comments,
                    function(index, comment) {
                        strComments += `<tr><td>${comment.commentId} ${comment.commentText}</td></tr>`;
                    });
                $("#comments").html(strComments);

            });


            function listComments(callback) {
                $.ajax({
                    url: "/Api/CommentsApi/",
                    data: {},
                    type: "GET",
                    contentType: "application/json;charset=utf-8",
                }).then(function(comments) {
                    callback(comments);
                });
            }
        }

        //---------------------------View all comments on post-------------------------------------//
        function get(id) {

            listCommentOnPost(function (comments) {
                if (isUserLoggedIn()) {
                    var strComments = "";
                    $.each(comments,
                        function(index, comment) {
                            strComments += `<tr><td>---${comment.Owner}</td> <td>---${comment.created} </td> <td>---${comment.commentText}</td> <td>---${comment.modified}</td></tr>`;
                        });
                    $("#commentsOnPost").html(strComments);
                }

            });

            function listCommentOnPost(callback) {
                $.ajax({
                    beforeSend: function(xhr) {
                        if (isUserLoggedIn()) {
                            xhr.setRequestHeader('Authorization', 'Bearer ' + getSavedToken());
                        }
                    },
                    url: "/Api/CommentsApi/" + id,
                    data: {},
                    type: "GET",
                    contentType: "application/json;charset=utf-8",
                }).then(function(comments) {
                    callback(comments);
                });
            }

            if (isUserLoggedIn()){
                $('#btLoginContainer').hide();
                $('#btLogoutContainer').show();
            }else {
                $('#btLoginContainer').show();
                $('#btLogoutContainer').hide();
            }
        }

        //-----------------------add a comment to the post-------------------------------------//

        function add() {

            var innhold = document.getElementById('add').value;

            var comment = {
                "CommentText": innhold,
                "postId": @TempData["chosenId"],
                "Owner": localStorage.getItem("username")
            };
            $.ajax({
                type: "POST",
                url: "/Api/CommentsApi/",
                data: JSON.stringify(comment),
                contentType: "application/json;charset=utf-8",
                dataType: 'json',
                success: function (result) {
                    //$("#update").html("<p>POST ferdig ok ..." + "</p>");
                    swal({
                        title: "Voila!",
                        CommentText: "Kommentaren er lagret!",
                        icon: "success",
                        button: "Lukk",
                    });
                    $("#add").val('');
                    get(@TempData["chosenId"]);
                },

                error: function (req, status, error) {
                    $("#update").html("AJAX error");
                }
            });
        }

        $(document).ready(function() {

            $("#commentsOnPost").html("<p>Må logge inn for se innlegg..." + "</p>");
            get(@TempData["chosenId"]);
            $("#loginToCreateToken").on("click",
                function () {
                    const email = $("#InputEmail").val();
                    const password = $("#InputPassword").val();
                    getToken(email, password);
                });
            $("#modalButton").hide();
            //showAll(); //viser absolutt alle kommentarer
        });


    </script>
}

<div style="margin: 50px auto; width:600px;">
    <div id="btLoginContainer">
        <label>Oppgi gyldig brukernavn og passord for å se kommentarer</label>
        <input type="text" name="username" id="InputEmail" placeholder="Username" />
        <input type="password" name="password" id="InputPassword" placeholder="Password" />
        <button id="loginToCreateToken">Login</button><br>

    </div>
    <div id="btLogoutContainer">
        <button id="btLogout">Logout</button>
    </div>
</div>

<h5>Kommentarer på innlegg fra webApi: </h5>
<hr />
<div id="commentsOnPost"></div>

<div style="margin: 50px; background: lightgray" id="responseContainer">

</div>

<div id="update"></div>
<div id="noAccess"></div>

<div class="container">
    <!-- Trigger the modal with a button -->
    <button type="button" id="modalButton" class="btn btn-info btn-lg" data-toggle="modal" data-target="#myModal">Legg til kommentar</button>

    <!-- Modal -->
    <div class="modal fade" id="myModal" role="dialog">
        <div class="modal-dialog">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Modal Header</h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-4">
                            <textarea type="CommentText" id="add" rows="4" cols="50" placeholder="legg inn ny kommentar..."></textarea>
                            <input type="button" value="Legg til" onclick="add()">

                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>

        </div>
    </div>

</div>


