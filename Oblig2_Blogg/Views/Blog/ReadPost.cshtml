@using System.Linq.Expressions
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Oblig2_Blogg.Authorization
@using Oblig2_Blogg.Models.Entities
@model Oblig2_Blogg.Models.ViewModels.PostViewModel

@inject SignInManager<ApplicationUser> signInManager
@inject UserManager<ApplicationUser> userManager
@inject IAuthorizationService AuthorizationService

@{
    ViewData["Title"] = "ReadPost"; }

<h1>@Model.PostText</h1>
<hr />
<div>
    <h4>Post</h4>

    <hr />
    @if (TempData["Feedback"] != null)
    {
        <div class="success-centered text-info">
            <h1>@TempData["Feedback"]</h1>
        </div>
    }
    <p>
        Created: @Model.Created,
        @if (@Model.Owner == null)
        {<a> User not registered</a> }
        else
        {<a> Created by: @Model.Owner.FirstName</a> }
    </p>

    <hr />
    @if (TempData["Feedback"] != null)
    {
        <div class="success-centered text-info">
            <h1>@TempData["Feedback"]</h1>
        </div>
    }
    <hr />

    <p>@Html.ActionLink("Create new comment", "CreateComment", "Post", new { PostId = @Model.PostId, id = @Model.PostId })</p>
    <hr />
    <p>Comments:....</p>
    <hr />
</div>

<table class="table table-hover">
    <tr>
        <th>User</th>
        <th>Created</th>
        <th>Modified </th>
        <th>Comment </th>
        <th>Options</th>
    </tr>
    @try
    {
        @foreach (var item in Model.Comments)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Owner.FirstName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Created)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Modified)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CommentText)
                </td>
                <td>
                    @if ((await AuthorizationService.AuthorizeAsync(
                     User, item,
                     BlogOperations.Update)).Succeeded)
                    {
                        @if (signInManager.IsSignedIn(User))
                        {
                            @Html.ActionLink("Edit", "EditComment","Post", new { id = item.CommentId })

                        }
                    }

                    @if ((await AuthorizationService.AuthorizeAsync(
                       User, item,
                       BlogOperations.Update)).Succeeded)
                    {
                        @if (signInManager.IsSignedIn(User))
                        {
                            @Html.ActionLink(" | Delete", "DeleteComment", "Post", new { id = item.CommentId })

                        }
                    }
                </td>
            </tr>
        }
    }
    catch (NullReferenceException e)
    {
        Console.Write(e);
    }
</table>

<div>
    <a asp-action="Index">Back to List</a> |
    @Html.ActionLink("Gå tilbake til innlegg", "ReadBlog", new { id = Model.BlogId })
</div>
